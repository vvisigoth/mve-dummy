> Eval is slow - can I get a hint?
~fodwyt-ragful


A scheme program, at the toplevel, is a list of definitions.

    (define (is-even? n)
      (or (= n 0)
          (is-odd? (- n 1))))
    
    (define (is-odd? n)
      (and (not (= n 0))
           (is-even (- n 1))))
           
Many of the call sites in typical programs have the general character of calling some *named* piece of code. That's very handy when writing a compiler, since it allows you to emit a direct jump to some other compiled piece of code. Or, if it
is a tail call to the function currently being defined, you can even compile to a loop, which can be dramatically faster
than a function call.

The fundamental character of nock however is that everything is built out of eval - `2` - nock itself. nock `9` is the closest thing to a function call, but neither `2` nor `9` gives an aspiring nock compiler any clues about which code we will be calling. This complicates the task of emitting efficient compiled code for `9`, a rather fundamental task for a nock compiler. We have a few options:

  1)  statically analyze the core-producing part of the formula to see if it can only produce one particular battery.
      not usually practical, and definitely not trivial.
  2)  do some sort of indirect call in the compiled code (call through a function pointer, etc). This is easy to implement,
      but is slow and defeats optimizations like inlining.
  3)  observe the running call site and see which batteries are actually produced, then later compile specialized branches
      (1-3) that check if the core has some known battery, followed by a direct call if the check passes. This is the
      approach taken in jaque. As ~pittyp-datfyn says, "so i'm hearing tracing jit." That's basically the other approach.
      This performs well, but is not always easy to implement.

It strikes me that an Urbit-style solution to this problem is to get a hint from the hoon compiler. Hoon knows (a lot of
the time) the battery is going to be. I propose that the core producing part of a nock 9 be wrapped by the hoon compiler in a hint containing a seminoun (see `++musk`), indicating at least what the battery is. This would enable a nock compiler to emit at least a check and specialized branch (containing direct calls and/or loop statements), and additionally would provide the compiler with a proof target to elide the equality check. Runtime systems less sophisticated than graal/truffle or rpython would stand a much better chance of achieving acceptable performance. Similar steps could be taken for nock `2` if the hoon compiler knows what the formula part will be.

Calling for comments, especially from ~sorreg-namtyv.