~tonweb-salweb-mosmyr-widhex--wacdep-dorref-dozdev-samzod
~ponmep:
As soon as we switch to a 64-bit memory model, the limit to data storage will be from the host OS instead of from Urbit. The max data storage in Urbit would then be limited to the amount of virtual memory provided by the host. The actual number is lower than 2^64, but [this page](http://blog.sungju.org/2015/11/17/whats-virtual-address-limit-of-32bit64bit-linux-kernel-2/) claims it's just under 128TB for Linux, which should be enough for almost everyone for at least another few years.

The overall model is that Urbit presents the programmer with a single-level store: persistence is handled by the Urbit OS. Right now Vere uses a relatively simple persistence model, where the whole Arvo kernel is maintained in virtual memory and then synced to disk periodically as a checkpoint. Note that virtual memory is an abstraction provided by the host OS, which moves bytes back and forth between RAM and swap opaquely according to its own arcane judgment. This means not all of Urbit's 2GB loom is necessarily all stored in RAM at any given moment. Only the simplicity of Urbit's memory model limits our storage space to that of the host's virtual memory. If 128TB became a bottleneck at some point, the memory mapping could be given another layer of indirection to transcend it and gain access to all available disk space, including any attached network filesystems.

~hosneb:
The event log does grow indefinitely right now because we haven't built any compaction tools for it. It grows outside Vere's loom, though, so it doesn't impinge on the 2GB reserved for Arvo. In terms of scale, ~zod's event log just exceeded 100GB after over a year of continuous operation. Most users will see much less usage than that for the time being.

-  ~rovnys-ricfer