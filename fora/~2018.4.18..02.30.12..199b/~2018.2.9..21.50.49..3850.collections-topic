> A ~2018.2.8 /urbit-meta Discussion on App Data Persistence
~tonlur-sarret


## `~2018.2.8` `/urbit-meta` Backlog

```
~ponnys-nacwer- on the note of direct logging to clay, what's the      ~13.12.25
                current thought around data persistence?
-------[14.605]
~palfun-foslup- you mean being ablo to delete a file and all its       ~13.13.38
                history?
~ponnys-nacwer- i remember ~sorreg saying something about how apps are ~13.13.46
                persistent themselves, but one wrong ++prep could
                cause you to lose data.
~palfun-foslup- i guess you can soon achieve that by deleting is and   ~13.13.58
                setting permissions on it to fully private..
~palfun-foslup- "achieve something like that"                          ~13.14.20
~ponnys-nacwer- more about the pattern for writing data so that it     ~13.14.12
                persists forever.
-------[14.610]
~ponnys-nacwer- i believe master-morzod and i hashed out a workable    ~13.14.56
                solution for permanently "deleting" files from clay.
~ponnys-nacwer- (tl;dr: make the blobstore a typed union of blob or    ~13.15.41
                %deleted.)
~palfun-foslup- ah, hmm. first thing that pops up in my mind is that   ~13.15.50
                being able to make state snapshots of apps in gall
                would be pretty cool, but also has implicatoins for
                how much previous versions your ++prep needs to
                support
~ponnys-nacwer- oh, like, i'm not even thinking about state snapshots. ~13.16.21
~ponnys-nacwer- so: hall has a bunch of data. this data has a mark.    ~13.17.03
                this mark is in clay. should the data be in clay or
                your app for long term storage.
-------[14.615]
~ponnys-nacwer- like, everything regarding the transitory state of     ~13.17.19
                syncing and such should live in gall. sure.
~ponnys-nacwer- but the content that you fetch, not the metadata,      ~13.17.45
                where does that go?
~palfun-foslup- so, just the data it can output specifically? hmm      ~13.20.04
~ponnys-nacwer- so if you put the logged messages into clay, and have  ~13.22.01
                this be the canonical datastore, you can reactively
                modify the messages, and let clay take care of the
                referential transparency, while also leveraging clay
                to calculate diffs and changes over time.
~palfun-foslup- right, basically mirroring to/from clay                ~13.23.39
-------[14.620]
~ponnys-nacwer- if the data is in clay, you could trigger ford builds  ~13.22.39
                off of it.
~palfun-foslup- there's probably fun things to we done with that, yeah ~13.24.01
~rovnys-ricfer- ~sorreg was saying the other day that the general      ~13.25.32
                rubrik for deciding whether to store data in clay or
                gall should come down to revisioning
~rovnys-ricfer- if you need a piece of data to have all its previous   ~13.25.43
                versions tracked, put it in clay
~palfun-foslup- not sure about making it canonical though, the gall    ~13.25.47
                state should maybe be authorative still? even if it's
                always in sync with clay-side changes
-------[14.625]
~rovnys-ricfer- otherwise (you only care about the current state),     ~13.26.01
                keep it in gall
~ponnys-nacwer- ~rovnys, yeah, that's the conversation i'm thinking    ~13.26.26
                about.
~ponnys-nacwer- i'm just not sure i agree with it though.              ~13.26.33
~ponnys-nacwer- clay's big advantage is its durability.                ~13.26.47
~ponnys-nacwer- a bad ++prep won't cause you to lose data. vane code   ~13.27.18
                is held to a higher standard than random program code.
-------[14.630]
~ponnys-nacwer- and then do what with it?                              ~13.28.03
~rovnys-ricfer- i'm not sure i understand ... you should be able to    ~13.27.49
                reconstruct the previous state of your gall app by
                replaying event history
~rovnys-ricfer- to just before the bad ++prep call                     ~13.28.01
~rovnys-ricfer- i guess try to reload the previous version of the app? ~13.28.40
                you'd have that problem no matter where the data was
                stored, i think
~rovnys-ricfer- i'm also not sure there's a general solution to that   ~13.29.12
                problem. i think it might depend on your recovery
                strategy
-------[14.635]
~rovnys-ricfer- if you need to change the app's code, that's one thing ~13.29.20
~rovnys-ricfer- (i could be wrong about that)                          ~13.29.34
~ponnys-nacwer- like, i've never heard discussion of replaying urbit   ~13.30.15
                event logs partially and then forking off in a
                different direction.
~ponnys-nacwer- it seems really user hostile and seems to go against   ~13.31.00
                the idea of you having one urbit event log.
~rovnys-ricfer- there's no reason we couldn't do it, i don't think, if ~13.31.10
                there were an interface for arvo to ask vere for, say,
                its state at a particular event number
-------[14.640]
~rovnys-ricfer- ~fodwyt and i discussed this w.r.t. pruning event      ~13.31.43
                history a couple months ago
~rovnys-ricfer- say, you want some file to appear to have never shown  ~13.31.57
                up
~rovnys-ricfer- the way to achieve that would be to remove any         ~13.32.26
                instances of that file's contents from the event
                history in addition to the state
~rovnys-ricfer- and there was some question as to whether this would   ~13.32.46
                need to be done from outside aroo
~rovnys-ricfer- *arvo                                                  ~13.32.47
-------[14.645]
~rovnys-ricfer- ~fodwyt thought it would be fine, and i think i'm      ~13.33.02
                convinced
~ponnys-nacwer- yeah, and i objected to that at the time because it    ~13.33.30
                would have butterfly effect issues with the layout of
                data structures, which might be observable.
~rovnys-ricfer- hmm                                                    ~13.33.46
~ponnys-nacwer- much better to just tombstone instead of rewriting     ~13.33.43
                history.
~rovnys-ricfer- how would that work?                                   ~13.34.02
-------[14.650]
~ponnys-nacwer- right now, clay has a blobstore. (map hash blob)       ~13.34.15
~ponnys-nacwer- make that a union type between blob and %deleted.      ~13.34.26
~ponnys-nacwer- so let's say there's a file that goes into your urbit  ~13.34.48
                that you shouldn't have added.
~ponnys-nacwer- add a command which changes the blob to %deleted.      ~13.35.17
~ponnys-nacwer- $%([%blob blob] [%deleted ~])                          ~13.35.36
-------[14.655]
~ponnys-nacwer- this doesn't mutate the clay state, which is all       ~13.36.06
                hashes and still refers to the "deleted" file.
~ponnys-nacwer- so it doesn't break referential transparency           ~13.36.13
~master~morzod- and you can checkpoint and truncate the event log, if  ~13.37.50
                legal obligations make it necessary to delete all
                traces
~palfun-foslup- so it'll just give a "can't tell you right now"        ~13.37.46
                response when trying to access that file?
~palfun-foslup- old revision of that file*                             ~13.38.03
-------[14.660]
~ponnys-nacwer- this does leave a set of hashes to the file you        ~13.37.33
                deleted in your clay state.
~ponnys-nacwer- ~tiplyx: exactly                                       ~13.37.44
~rovnys-ricfer- oh, that does sound better                             ~13.38.40
~rovnys-ricfer- event pruning gives me the heebie jeebies like git     ~13.39.10
                rebase
~rovnys-ricfer/ https://en.wikipedia.org/wiki/Historical_negationism   ~13.40.19
-------[14.665]
~ponnys-nacwer- wait, let's go back to what i really want to discuss:  ~13.40.29
                data durability.
~rovnys-ricfer- ok                                                     ~13.40.43
~ponnys-nacwer- this was a tangent.                                    ~13.40.37
~ponnys-nacwer- so a bad ++prep arm destorys an app's state. i see     ~13.41.10
                this as something that might be a regular occurance.
~ponnys-nacwer- because it seems too easy to do.                       ~13.41.17
-------[14.670]
~rovnys-ricfer- yeah                                                   ~13.41.44
~rovnys-ricfer- it's like a database migration                         ~13.41.55
~ponnys-nacwer- and those get royally fucked all the time.             ~13.42.02
~rovnys-ricfer- you can screw it up and lose some data                 ~13.42.12
~ponnys-nacwer- if you write the data (so that it conforms to a mark)  ~13.42.45
                to clay, even if the app updates the mark to something
                weird and incompatible, you still have a typed thing
                in %clay.
-------[14.675]
~ponnys-nacwer- and this durability seems to be the most important     ~13.43.08
                property of clay to me.
~ponnys-nacwer- revision control: nice.                                ~13.43.17
~ponnys-nacwer- actually being a typed, referentially transparent data ~13.43.34
                store: the really cool thing.
~rovnys-ricfer- so then how would you store data where you *don't*     ~13.44.59
                want every revision kept?
~ponnys-nacwer- i'm not sure what data falls under that umbrella.      ~13.45.18
-------[14.680]
~rovnys-ricfer- a screen buffer, let's say                             ~13.45.46
~rovnys-ricfer- graphics screen                                        ~13.45.58
~rovnys-ricfer- not unix screen                                        ~13.46.00
~rovnys-ricfer- not that we do that in urbit                           ~13.46.04
~rovnys-ricfer- but, ephemera in general                               ~13.46.25
-------[14.685]
~master~morzod- i think cgy proposed a data / metadata distinction in  ~13.47.00
                a gh thread
~ponnys-nacwer- ok, if that's what was being discussed, then maybe i   ~13.46.45
                don't disagree.
~rovnys-ricfer- i suppose you could have some code that %delete's      ~13.47.01
                older versions from clay automatically
~master~morzod- wrt storing state in clay or gall                      ~13.47.27
~ponnys-nacwer- the conversation made it sound like actual user data   ~13.47.14
                was under discussion in that gh thread.
-------[14.690]
~rovnys-ricfer- he did propose that distinction too, yeah              ~13.47.31
~rovnys-ricfer- i'm not so sure about the data/metadata distinction    ~13.48.03
~master~morzod- ~ponnys, are you suggesting that all gall state live   ~13.48.26
                in clay?
~rovnys-ricfer- seems to me that databases usually store both data and ~13.48.22
                metadata
~rovnys-ricfer- and we want clay to be a database                      ~13.48.27
-------[14.695]
~palfun-foslup- anyone know where that dicussion was? want to take a   ~13.48.47
                look
~ponnys-nacwer- no, but all user data should.                          ~13.48.52
~rovnys-ricfer- you definitely have a point, ~ponnys                   ~13.49.43
~master~morzod/ https://github.com/urbit/arvo/issues/594               ~13.50.02
~ponnys-nacwer- like, in hall, the current state of the various        ~13.50.06
                subscriptions is app state and transitory. i am not
                negatively impacted if ++prep goes crazy.
-------[14.700]
~ponnys-nacwer- in hall, if i lose my chat messages, i become very     ~13.50.19
                angry.
~palfun-foslup- thanks ~master                                         ~13.50.45
~rovnys-ricfer- mm i'd be upset if i lost my subscription state, too   ~13.51.14
~master~morzod- i have an imprecise and circular definition: i want    ~13.51.42
                the things that i want to permanently persist to be in
                clay
~rovnys-ricfer- i'd have to re-remember all my channels and whatnot    ~13.51.36
-------[14.705]
~ponnys-nacwer- oh, that. i was talking about whatever internal format ~13.51.44
                syncing stuff hall does.
~rovnys-ricfer- which goes to your point about not wanting these       ~13.51.56
                things to be ephemeral ...
~master~morzod- wrt hall, that might be a per-channel decision, or     ~13.52.19
                even more granular
~ponnys-nacwer- sure, list of channels seems like something that       ~13.52.18
                should be saved.
~master~morzod- (wandering around a blue sky, that is)                 ~13.52.44
-------[14.710]
~palfun-foslup- if your gall subscriptions fall over, the targets      ~13.54.12
                still stay as sources in metadata, so you could re-sub
                to everything in one click if hall had a hook for that
~ponnys-nacwer- skimming that thread again, i might be overreacting to ~13.57.45
                the suggestion that nobody keeps binary data under
                revision control.
~rovnys-ricfer- an option here might be to have a per-app setting in   ~13.57.56
                gall that determines the level of persistence
~ponnys-nacwer- which is really wrong.                                 ~13.57.57
~rovnys-ricfer- the current setting is the most ephemeral              ~13.58.07
-------[14.715]
~rovnys-ricfer- one level above that is storing marked gall state in   ~13.58.49
                clay
~rovnys-ricfer- and a level above that is storing full gall app core   ~13.59.01
                snapshots
~ponnys-nacwer- perforce and svn continue to have their niche because  ~13.59.04
                git is so terrible at binary files, yes.
~ponnys-nacwer- that's interesting, ~rovnys                            ~13.59.48
~ponnys-nacwer- modification of that idea: an arm in a gall app which  ~14.00.17
                returns the apps state as a marked noun.
-------[14.720]
~ponnys-nacwer- gives the app an opt-in to persistence, but an easy    ~14.00.37
                one.
~ponnys-nacwer- gall then can manage the diffing and such to clay.     ~14.00.49
~rovnys-ricfer- yeah, you'd need that arm for an app to support the    ~14.01.44
                mid-level persistence (marked gall state in clay)
~rovnys-ricfer- i guess you're saying the app itself would control     ~14.02.20
                that, rather than the user
~ponnys-nacwer- yeah. the app should know what's transitory. you don't ~14.02.55
                want to write a bunch of bones which won't have
                meaning in the future to clay.
-------[14.725]
~ponnys-nacwer- like, i agree that there is actual metadata that       ~14.03.12
                shouldn't be permanentaly stored.
~rovnys-ricfer- if the app controls its level of persistence, then you ~14.03.24
                couldn't expose the lever to the user because in
                general, the app might be expecting its previous
                states to be backed up in clay, so turning persistence
                off might just break everything
~ponnys-nacwer- i'm just a bit paranoid of going in the other          ~14.03.25
                direction.
~rovnys-ricfer- yeah, having the app control this might be the right   ~14.03.50
                call
~ponnys-nacwer- is there a way for ford to depend on something in an   ~14.04.20
                app's namespace?
-------[14.730]
~rovnys-ricfer- sort of                                                ~14.04.36
~rovnys-ricfer- it's kinda broken right now                            ~14.04.39
~rovnys-ricfer- it *should* be able to, though                         ~14.04.49
~rovnys-ricfer- right now you can't register a live dependency on a    ~14.05.08
                gall app
~rovnys-ricfer- from ford                                              ~14.05.13
-------[14.735]
~rovnys-ricfer- which makes that feature basically useless             ~14.05.23
~rovnys-ricfer- we do plan on fixing that at some point                ~14.06.09
~rovnys-ricfer- ~sorreg considers it to be an important feature of     ~14.06.24
                ford
~ponnys-nacwer- so, to go back to a screen example.                    ~14.06.39
~ponnys-nacwer- you have an app which is your screen and whose         ~14.07.14
                internal state is a set of surfaces.
-------[14.740]
~ponnys-nacwer- you don't want this saved forever.                     ~14.07.20
~ponnys-nacwer- this is sort of offtopic, but how much of screen       ~14.08.27
                refresh gets handled by ford?
~ponnys-nacwer- sorry for the tangent.                                 ~14.08.36
~ponnys-nacwer- but changing data from one mark to another is what     ~14.08.56
                ford is good at
~ponnys-nacwer- (or pumping it through a renderer)                     ~14.09.02
-------[14.745]
~rovnys-ricfer- right now everything except gall state gets pumped     ~14.09.25
                through ford
~rovnys-ricfer- using marks, renderers, or manually assembling a       ~14.09.53
                ++hood like dojo does
~rovnys-ricfer- i'm (at this present moment) modifying ford to have a  ~14.10.39
                clearer distinction between one-off and live builds
~ponnys-nacwer- screen state as live build.                            ~14.10.46
~rovnys-ricfer- which should make it easier for ford to jettison       ~14.10.54
                unused previous build results
-------[14.750]
~rovnys-ricfer- well, at the moment screen state itself is only known  ~14.11.22
                in the web browser
~rovnys-ricfer- urbit maintains just the initial html and whatever     ~14.11.46
                subscriptions the page has open
~rovnys-ricfer- (i'm thinking of the static ren/tree in the mve        ~14.11.59
                branch)
~ponnys-nacwer- (i have not looked at the mve branch)                  ~14.12.10
~rovnys-ricfer- at some point there will probably be a dom vane        ~14.12.43
                (~fodwyt's thought) or a generic gui vane (how i was
                thinking about it)
-------[14.755]
~palfun-foslup- funny, i was mailing about generic ui with a guy i met ~14.13.59
                at fosdem
~rovnys-ricfer- they might be the same idea                            ~14.12.53
~palfun-foslup- it occurred to me that we can probably already do      ~14.14.36
                generic ui in a hacky kinda way by just writing a lib
                for generating components and calling that from udon
                files
~rovnys-ricfer- doing all gui work over http is not very urbitious     ~14.13.07
~rovnys-ricfer- long-long-term, native clients in vere interacting     ~14.13.56
                with a gui arm would be the way to go, i believe
-------[14.760]
~rovnys-ricfer- *gui vane                                              ~14.14.05
~ponnys-nacwer- so a person starts up their web browser and downloads  ~14.14.44
                a moon webassembly client / uses their urbit moon app.
~ponnys-nacwer- their moon app's local gui vane talks to their         ~14.15.01
                planet's gui vane?
~rovnys-ricfer- oh, like x forwarding?                                 ~14.15.38
~rovnys-ricfer- i guess                                                ~14.15.40
-------[14.765]
~rovnys-ricfer- i hadn't thought of that                               ~14.15.42
~rovnys-ricfer- that would be one way to do that                       ~14.15.58
~rovnys-ricfer- you could alternatively have web-vere translate your   ~14.16.35
                web-moon's gui vane output into browser dom
~ponnys-nacwer- also possible.                                         ~14.16.53
~rovnys-ricfer- although presumably there'd be something like an       ~14.17.02
                iframe concept in the gui language
-------[14.770]
~rovnys-ricfer- so you could do both                                   ~14.17.05
~rovnys-ricfer- have a remote iframe inside your local moon one if you ~14.17.26
                want to see some screen on your planet
~rovnys-ricfer- that feature could be used for screen-sharing too, i   ~14.17.48
                guess
~ponnys-nacwer- whatever screen sharing system should have a strong    ~14.18.57
                sense of identity on input. mother of all demos still
                hasn't been fully realized.
~rovnys-ricfer- oh, that's true                                        ~14.19.28
-------[14.775]
~rovnys-ricfer- haha                                                   ~14.19.31
~ponnys-nacwer- urbit will complete the system of douglas englebart    ~14.19.27
~rovnys-ricfer- oh, you weren't making this up                         ~14.20.21
~rovnys-ricfer/ https://en.wikipedia.org/wiki/The_Mother_of_All_Demos  ~14.20.22
~rovnys-ricfer- wow                                                    ~14.20.23
-------[14.780]
~ponnys-nacwer- wait. you've never seen that?!                         ~14.20.24
~rovnys-ricfer- no!                                                    ~14.20.37
~ponnys-nacwer- watching the entire thing, even today, is worth your   ~14.20.41
                time.
~rovnys-ricfer- there's video?                                         ~14.21.20
~rovnys-ricfer- oh yeah i've gotta see that                            ~14.21.27
-------[14.785]
~ponnys-nacwer/ https://www.youtube.com/watch?v=yJDv-zdhzMY            ~14.21.29
~rovnys-ricfer- my mind is blown                                       ~14.22.24
~ponnys-nacwer- so much of what has happened since it was given in     ~14.22.28
                1968  is a direct or indirect reaction to this
                presentation.
~ponnys-nacwer- and there are still parts of it that haven't been      ~14.22.58
                replicated.
~rovnys-ricfer- what's missing?                                        ~14.24.15
-------[14.790]
~ponnys-nacwer- a lot of the collaborative real time editing stuff.    ~14.25.31
~ponnys-nacwer- google docs and etherpad finally got around to having  ~14.25.47
                something like that in the 2000s.
~ponnys-nacwer- but (it's been a few years since i last watched this   ~14.26.52
                in full) the collaboration was more like having a gui
                model with multiple identity-correlated input devices.
~ponnys-nacwer- instead of having a single app which was like google   ~14.27.07
                docs, it was the entire interface.
~marmet-racwyl- thats nuts                                             ~14.27.24
-------[14.795]
~ponnys-nacwer- and what is urbit good at? giving multiple computers   ~14.28.28
                strong identities.
~rovnys-ricfer- very trye                                              ~14.28.58
~rovnys-ricfer- *true                                                  ~14.29.01
~ponnys-nacwer- we already have operational transformation based       ~14.29.07
                console, expanding that to a future gui is a minor
                step.
~ponnys-nacwer- it's not "clicked at 50, 25", it's "~ponnys-podfer     ~14.29.37
                clicked at 50, 25".
-------[14.800]
~rovnys-ricfer- i've wanted this for years                             ~14.30.15
~rovnys-ricfer- but never seen it                                      ~14.30.18
~palfun-foslup- this is great, thanks for sharing
```