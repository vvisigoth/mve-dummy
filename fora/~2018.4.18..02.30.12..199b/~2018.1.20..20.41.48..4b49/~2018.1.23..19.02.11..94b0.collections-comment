~fodwyt-ragful
The nock runtime must of course check any information given it by the Hoon type system to be correct. Nock is not typed.  The point is that a direct call behind an equality check performs significantly better than a lookup and indirect call, and a hint -- let's say a dumber, less designed one, like `[10 [%batt 1 literal-battery] core-formula]`, which is the minimum useful information here -- gives you just enough information to speculate. You can (currently, must) get that information from runtime observation, and so you're correct that any truly serious nock runtime has to do something like that. Such a hint would enable dumber runtimes (that do no runtime analysis) to be considered "serious."

The proposed nock 12 (which, having spent a lot of time in the vere guts, I think of as a "the molt macro") would absolutely alleviate some of the pain of doing static analysis on nock code, since it allows you to express "this core is just like that one but with a different sample" directly. It's nothing you couldn't calculate from existing nock, but it let's you be dumber (a theme I support wholeheartedly). Even with a really smart static analyzer, nock 12, and a jet dashboard full of static subject information, I bet there are cases where you couldn't resolve the battery statically on a 9, and that's for fast-hinted cores. Your thriftiness with hints notwithstanding, I think it's a justified leak of type information.

p.s. Another funny thing about runtime observation it that it's subject to pathological inputs skewing its effectiveness. A lot of the complexity in systems that do this surrounds invalidating bad assumptions. A `%batt` hint obviously does not suffer from this deficiency.